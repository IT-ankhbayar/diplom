import prisma from '@/app/libs/prismadb';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/lib/auth';
import type { AuthOptions } from 'next-auth';
import { headers } from 'next/headers'; // üëà Next.js-–∏–π–Ω headers-–∏–π–≥ –∏–º–ø–æ—Ä—Ç–ª–æ–≤

export default async function getCurrentUser() {
    // üí° –ê–õ–î–ê–ê–ì –ê–†–ò–õ–ì–ê–• –ì–û–õ –ê–õ–•–ê–ú: 
    // headers() —Ñ—É–Ω–∫—Ü–∏–π–≥ –¥—É—É–¥–∞–∂, —ç–Ω—ç —Ñ—É–Ω–∫—Ü–∏–π–≥ –∞—à–∏–≥–ª–∞–∂ –±—É–π
    // –±“Ø—Ö —Ö—É—É–¥—Å—ã–≥ –•–ê–ú–ì–ò–ô–ù –≠–•–≠–ù–î Dynamic –±–æ–ª–≥–æ–Ω–æ.
    headers(); 
    
    // getServerSession-–∏–π–≥ try/catch-—ç—ç—Å –≥–∞–¥–Ω–∞ “Ø–ª–¥—ç—ç—Ö –Ω—å –∑”©–≤.
    const session = await getServerSession(authOptions as AuthOptions);
    
    try {
        if (!session?.user?.email) {
            return null;
        }

        const currentUser = await prisma.user.findUnique({
            where: {
                email: session.user.email as string
            }
        });

        if (!currentUser) {
            return null;
        }

        return {
            ...currentUser,
            createdAt: currentUser.createdAt.toISOString(),
            updatedAt: currentUser.updatedAt.toISOString(),
            emailVerified: currentUser.emailVerified?.toISOString() || null,
            role: currentUser.role,
            verified: currentUser.verified,
            verificationImage: currentUser.verificationImage
        };
        
    } catch (error: unknown) {
        console.error('getCurrentUser error:', error);
        return null;
    }
}